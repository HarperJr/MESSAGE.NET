//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Messanger.DataServiceWcf {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataServiceWcf.IDataService")]
    public interface IDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/InsertConsumer", ReplyAction="http://tempuri.org/IDataService/InsertConsumerResponse")]
        void InsertConsumer(DataService.ConsumerContract consumerContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/InsertConsumer", ReplyAction="http://tempuri.org/IDataService/InsertConsumerResponse")]
        System.Threading.Tasks.Task InsertConsumerAsync(DataService.ConsumerContract consumerContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetConsumersMatchNameWithOffsetAndLimit", ReplyAction="http://tempuri.org/IDataService/GetConsumersMatchNameWithOffsetAndLimitResponse")]
        DataService.ConsumerContract[] GetConsumersMatchNameWithOffsetAndLimit(string name, int offset, int limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetConsumersMatchNameWithOffsetAndLimit", ReplyAction="http://tempuri.org/IDataService/GetConsumersMatchNameWithOffsetAndLimitResponse")]
        System.Threading.Tasks.Task<DataService.ConsumerContract[]> GetConsumersMatchNameWithOffsetAndLimitAsync(string name, int offset, int limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetConsumerById", ReplyAction="http://tempuri.org/IDataService/GetConsumerByIdResponse")]
        DataService.ConsumerContract GetConsumerById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetConsumerById", ReplyAction="http://tempuri.org/IDataService/GetConsumerByIdResponse")]
        System.Threading.Tasks.Task<DataService.ConsumerContract> GetConsumerByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/InsertDialog", ReplyAction="http://tempuri.org/IDataService/InsertDialogResponse")]
        void InsertDialog(DataService.DialogContract dialogContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/InsertDialog", ReplyAction="http://tempuri.org/IDataService/InsertDialogResponse")]
        System.Threading.Tasks.Task InsertDialogAsync(DataService.DialogContract dialogContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDialogsByConsumerIdWithOffsetAndLimit", ReplyAction="http://tempuri.org/IDataService/GetDialogsByConsumerIdWithOffsetAndLimitResponse")]
        DataService.DialogContract[] GetDialogsByConsumerIdWithOffsetAndLimit(string consumerId, int offset, int limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetDialogsByConsumerIdWithOffsetAndLimit", ReplyAction="http://tempuri.org/IDataService/GetDialogsByConsumerIdWithOffsetAndLimitResponse")]
        System.Threading.Tasks.Task<DataService.DialogContract[]> GetDialogsByConsumerIdWithOffsetAndLimitAsync(string consumerId, int offset, int limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/InsertConsumerContact", ReplyAction="http://tempuri.org/IDataService/InsertConsumerContactResponse")]
        void InsertConsumerContact(string consumerId, DataService.ContactContract contactContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/InsertConsumerContact", ReplyAction="http://tempuri.org/IDataService/InsertConsumerContactResponse")]
        System.Threading.Tasks.Task InsertConsumerContactAsync(string consumerId, DataService.ContactContract contactContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetConsumerContactsById", ReplyAction="http://tempuri.org/IDataService/GetConsumerContactsByIdResponse")]
        DataService.ContactContract[] GetConsumerContactsById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetConsumerContactsById", ReplyAction="http://tempuri.org/IDataService/GetConsumerContactsByIdResponse")]
        System.Threading.Tasks.Task<DataService.ContactContract[]> GetConsumerContactsByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/InsertMessages", ReplyAction="http://tempuri.org/IDataService/InsertMessagesResponse")]
        void InsertMessages(DataService.MessageContract[] messages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/InsertMessages", ReplyAction="http://tempuri.org/IDataService/InsertMessagesResponse")]
        System.Threading.Tasks.Task InsertMessagesAsync(DataService.MessageContract[] messages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetMessagesByDialogIdWithOffsetAndLimit", ReplyAction="http://tempuri.org/IDataService/GetMessagesByDialogIdWithOffsetAndLimitResponse")]
        DataService.MessageContract[] GetMessagesByDialogIdWithOffsetAndLimit(int dialogId, int offset, int limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetMessagesByDialogIdWithOffsetAndLimit", ReplyAction="http://tempuri.org/IDataService/GetMessagesByDialogIdWithOffsetAndLimitResponse")]
        System.Threading.Tasks.Task<DataService.MessageContract[]> GetMessagesByDialogIdWithOffsetAndLimitAsync(int dialogId, int offset, int limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/InsertMultimedias", ReplyAction="http://tempuri.org/IDataService/InsertMultimediasResponse")]
        void InsertMultimedias(DataService.MultimediaContract[] multimedias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/InsertMultimedias", ReplyAction="http://tempuri.org/IDataService/InsertMultimediasResponse")]
        System.Threading.Tasks.Task InsertMultimediasAsync(DataService.MultimediaContract[] multimedias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetAttachedMultimediasByMessageId", ReplyAction="http://tempuri.org/IDataService/GetAttachedMultimediasByMessageIdResponse")]
        DataService.MultimediaContract[] GetAttachedMultimediasByMessageId(string messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetAttachedMultimediasByMessageId", ReplyAction="http://tempuri.org/IDataService/GetAttachedMultimediasByMessageIdResponse")]
        System.Threading.Tasks.Task<DataService.MultimediaContract[]> GetAttachedMultimediasByMessageIdAsync(string messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetMultimediaById", ReplyAction="http://tempuri.org/IDataService/GetMultimediaByIdResponse")]
        DataService.MultimediaContract GetMultimediaById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/GetMultimediaById", ReplyAction="http://tempuri.org/IDataService/GetMultimediaByIdResponse")]
        System.Threading.Tasks.Task<DataService.MultimediaContract> GetMultimediaByIdAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataServiceChannel : Messanger.DataServiceWcf.IDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<Messanger.DataServiceWcf.IDataService>, Messanger.DataServiceWcf.IDataService {
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void InsertConsumer(DataService.ConsumerContract consumerContract) {
            base.Channel.InsertConsumer(consumerContract);
        }
        
        public System.Threading.Tasks.Task InsertConsumerAsync(DataService.ConsumerContract consumerContract) {
            return base.Channel.InsertConsumerAsync(consumerContract);
        }
        
        public DataService.ConsumerContract[] GetConsumersMatchNameWithOffsetAndLimit(string name, int offset, int limit) {
            return base.Channel.GetConsumersMatchNameWithOffsetAndLimit(name, offset, limit);
        }
        
        public System.Threading.Tasks.Task<DataService.ConsumerContract[]> GetConsumersMatchNameWithOffsetAndLimitAsync(string name, int offset, int limit) {
            return base.Channel.GetConsumersMatchNameWithOffsetAndLimitAsync(name, offset, limit);
        }
        
        public DataService.ConsumerContract GetConsumerById(string id) {
            return base.Channel.GetConsumerById(id);
        }
        
        public System.Threading.Tasks.Task<DataService.ConsumerContract> GetConsumerByIdAsync(string id) {
            return base.Channel.GetConsumerByIdAsync(id);
        }
        
        public void InsertDialog(DataService.DialogContract dialogContract) {
            base.Channel.InsertDialog(dialogContract);
        }
        
        public System.Threading.Tasks.Task InsertDialogAsync(DataService.DialogContract dialogContract) {
            return base.Channel.InsertDialogAsync(dialogContract);
        }
        
        public DataService.DialogContract[] GetDialogsByConsumerIdWithOffsetAndLimit(string consumerId, int offset, int limit) {
            return base.Channel.GetDialogsByConsumerIdWithOffsetAndLimit(consumerId, offset, limit);
        }
        
        public System.Threading.Tasks.Task<DataService.DialogContract[]> GetDialogsByConsumerIdWithOffsetAndLimitAsync(string consumerId, int offset, int limit) {
            return base.Channel.GetDialogsByConsumerIdWithOffsetAndLimitAsync(consumerId, offset, limit);
        }
        
        public void InsertConsumerContact(string consumerId, DataService.ContactContract contactContract) {
            base.Channel.InsertConsumerContact(consumerId, contactContract);
        }
        
        public System.Threading.Tasks.Task InsertConsumerContactAsync(string consumerId, DataService.ContactContract contactContract) {
            return base.Channel.InsertConsumerContactAsync(consumerId, contactContract);
        }
        
        public DataService.ContactContract[] GetConsumerContactsById(string id) {
            return base.Channel.GetConsumerContactsById(id);
        }
        
        public System.Threading.Tasks.Task<DataService.ContactContract[]> GetConsumerContactsByIdAsync(string id) {
            return base.Channel.GetConsumerContactsByIdAsync(id);
        }
        
        public void InsertMessages(DataService.MessageContract[] messages) {
            base.Channel.InsertMessages(messages);
        }
        
        public System.Threading.Tasks.Task InsertMessagesAsync(DataService.MessageContract[] messages) {
            return base.Channel.InsertMessagesAsync(messages);
        }
        
        public DataService.MessageContract[] GetMessagesByDialogIdWithOffsetAndLimit(int dialogId, int offset, int limit) {
            return base.Channel.GetMessagesByDialogIdWithOffsetAndLimit(dialogId, offset, limit);
        }
        
        public System.Threading.Tasks.Task<DataService.MessageContract[]> GetMessagesByDialogIdWithOffsetAndLimitAsync(int dialogId, int offset, int limit) {
            return base.Channel.GetMessagesByDialogIdWithOffsetAndLimitAsync(dialogId, offset, limit);
        }
        
        public void InsertMultimedias(DataService.MultimediaContract[] multimedias) {
            base.Channel.InsertMultimedias(multimedias);
        }
        
        public System.Threading.Tasks.Task InsertMultimediasAsync(DataService.MultimediaContract[] multimedias) {
            return base.Channel.InsertMultimediasAsync(multimedias);
        }
        
        public DataService.MultimediaContract[] GetAttachedMultimediasByMessageId(string messageId) {
            return base.Channel.GetAttachedMultimediasByMessageId(messageId);
        }
        
        public System.Threading.Tasks.Task<DataService.MultimediaContract[]> GetAttachedMultimediasByMessageIdAsync(string messageId) {
            return base.Channel.GetAttachedMultimediasByMessageIdAsync(messageId);
        }
        
        public DataService.MultimediaContract GetMultimediaById(string id) {
            return base.Channel.GetMultimediaById(id);
        }
        
        public System.Threading.Tasks.Task<DataService.MultimediaContract> GetMultimediaByIdAsync(string id) {
            return base.Channel.GetMultimediaByIdAsync(id);
        }
    }
}
